# For naming conventions see the following article:
# http://osherove.com/blog/2005/4/3/naming-standards-for-unit-tests.html
# For more information on nose testing, seek the following article:
# http://pythontesting.net/framework/nose/nose-fixture-reference/
from nose.tools import *
import os
from nose import with_setup
# This has to be the name of the folder for the class
from predictionGuide import pipelineManager

class TestPipelineManager: 

	def setup(self):
		print("TestPipelineManger:setup() before each test method")
		self.classPMInstance =  pipelineManager.PipelineManager('PipelineManager')

	def teardown(self):
		print("TestPipelineManger:teardown() after each test method")

	@classmethod
	def setup_class(cls):
		print os.getcwd()
		os.chdir("./../pipeline_manager_template/pipelines/")
		print("setup_class() before any methods in the class")

	@classmethod
	def teardown_class(cls):
		print("teardown_class() before andy methods in the class")

	def test_Constructor_ConstructsObjectWithName_ObjectReturned(self):
		pmInstance = pipelineManager.PipelineManager('Test PipelineManager Instance')
		assert pmInstance.name == 'Test PipelineManager Instance'
	# Our base method assumes 
		# headers in both test and train files
		# first column of train should be the prediction label
	def test_LoadFeaturedData_ReadDataFromCSVFile_DataLoaded(self):
		self.classPMInstance.load_featured_data()
		assert self.classPMInstance.num_features == 5
		assert self.classPMInstance.num_examples == 2
	def test_LoadConfigFile_WithHeaderOneColumnConfig_DataLoaded(self):
		# Override Config File For Testing
		self.CONFIG_FILE = "withHeaderOneColumn" + self.CONFIG_FILE
		self.classPMInstance.load_config_file()
		# Should be header
		assert self.classPMInstance.header
		# Should be 0
		assert self.classPMInstance.pred_index == 0
	def test_LoadConfigFile_WithoutHeaderMultiColumnConfig_DataLoaded(self):
		# Override Config File For Testing
		self.CONFIG_FILE = "withoutHeaderMultiColumn" + self.CONFIG_FILE
		self.classPMInstance.load_config_file()
		# Should be header
		assert !self.classPMInstance.header
		# Should be 0
		assert self.classPMInstance.pred_index == 1
	# Change the outputfilename to reduce complication
	def writeSubmissionSetup():
		self.y_test = range(1:10)
	def writeSubmissionTeardown():
		#nothing
		a = 10
	@with_setup(writeSubmissionSetup(), writeSubmissionSetup())
	def test_WriteSubmissionOneColumnWithHeader_ProduceOutputFile_File(self):
		# Override what the config did for this test
		self.header = True
		self.pred_id
		self.SUBMISSION_FILE_SUFFIX = "_sample_submission_onecolumn_wheader.csv"
		# Output the data frame into a file
		self.write_compressed_submission();
		# Based on the template
		# Make Sure file exists
		assert os.path.isfile(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX)
		# See if the output is the expected
		submission = pd.read_csv(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX + ".gz")
		assert submission.shape[0] == 10
		assert submission.shape[1] == 2
	@with_setup(writeSubmissionSetup(), writeSubmissionSetup())
       	def test_WriteSubmissionOneColumnWithoutHeader_ProduceOutputFile_File(self):
		self.SUBMISSION_FILE_SUFFIX = "_sample_submission_one_column_woheader.csv"
		self.write_compressed_submission();
		assert os.path.isfile(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX)
		submission = pd.read_csv(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX + ".gz")
	@with_setup(writeSubmissionSetup(), writeSubmissionSetup())
	def test_WriteSubmissionMultipleColumnsWithHeader_ProduceOutputFile_File(self):
		self.header = True
		self.SUBMISSION_FILE_SUFFIX = "_sample_submission_multicolumn_wheader.csv"
		self.write_compressed_submission();
		assert os.path.isfile(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX)
		submission = pd.read_csv(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX + ".gz")
	@with_setup(writeSubmissionSetup(), writeSubmissionSetup())
	def test_WriteSubmissionMultipleColumnsWithoutHeader_ProduceOutputFile_File(self):
		self.SUBMISSION_FILE_SUFFIX = "_sample_submission_multicolumn_woheader.csv"
		self.write_compressed_submission();
		assert os.path.isfile(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX)
		submission = pd.read_csv(PipelineManager.OUTPUT_DIR + self.name + self.SUBMISSION_FILE_SUFFIX + ".gz")
