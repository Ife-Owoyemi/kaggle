Function Wrapping Class Checklist
1) Set Class Parameters:
	FUNCTIONNAME: library + functionname
	DEFAULTPARAMS: from documentation
2) Set Methods
	_init_(self,user_id,params, method_notes,parameters_notes)
		self.user_id = user_id
        self.name = FUNCTIONNAME
        if not method_notes:
            self.method_notes = []
        if not params:
            self.params = {}
        if not parameter_notes:
            self.parameter_notes = []
        # Generated by class or functions
        self.date = date.today
        self.stage = STAGENAME
        self.method_id = ""
        self.addDefaults(self.params)

    def addDefaults(self,params):
        for key in [Classname].DEFAULTPARAMS:
            if key not in params:
                parmams[key] = [Classname].DEFAULTPARAMS[key]
	run() Depends on the function

3) Make a dictionary with all the parameters and their defaults.
4) This will belong to the wrapper function and be used to set the defaults in the parameter dictionary passed to the object during initialization.
5) Fill in the _init_ function
6) Signature	(self,user_id,params,method_notes,parameters_notes)
7) Call methods
	set defaults
8)Fill in the run function
	This should have the function with all the parameters given by name = self.params["name"]
	auto_signatures

Example:
    Function Class Use:
        pca = PCA(n_components=0.8)
        train_x = pca.fit_transform(train_x)
        test_x = pca.transform(test_x)
    Function Wrapper Class:
        PCAwrapper Class: you can find in Kaggle/pythonModules/pm.py
    Function Wrapper Class use:
        pca_features = {params_here}
        fmas = PCAwrapper(user_id, pca_features)
        project.FMmethod(fmas)



    After: